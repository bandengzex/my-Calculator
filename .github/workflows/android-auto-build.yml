name: Android Auto Build

on:
  # 自动触发条件
  push:
    branches:
      - main  # 当代码推送到main分支时自动触发
      - master # 当代码推送到master分支时自动触发
  pull_request:
    branches:
      - main  # 当有PR提交到main分支时自动触发
      - master # 当有PR提交到master分支时自动触发
  # 保留手动触发选项
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    # 对于PR，只在源分支和目标分支不同时运行
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的提交历史

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Check and fix Gradle wrapper
        run: |
          # 检查gradle-wrapper.jar是否存在且大小合理
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ] || [ $(stat -c%s "gradle/wrapper/gradle-wrapper.jar") -lt 1000 ]; then
            echo "Warning: gradle-wrapper.jar is missing or corrupted. Recreating..."
            # 创建gradle-wrapper目录（如果不存在）
            mkdir -p gradle/wrapper
            # 重新生成gradle-wrapper.properties
            echo "distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
networkTimeout=10000
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists" > gradle/wrapper/gradle-wrapper.properties
            # 下载并解压Gradle来获取有效的wrapper jar
            wget -q https://services.gradle.org/distributions/gradle-8.4-bin.zip
            unzip -q gradle-8.4-bin.zip
            cp gradle-8.4/lib/gradle-wrapper.jar gradle/wrapper/
            rm -rf gradle-8.4 gradle-8.4-bin.zip
          fi
          # 确保gradlew可执行
          chmod +x ./gradlew

      # 缓存Gradle依赖
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 根据触发方式确定构建类型
      - name: Determine build type
        id: build_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.build_type }}" >> $GITHUB_OUTPUT
          else
            # 自动触发时默认使用debug构建
            echo "type=debug" >> $GITHUB_OUTPUT
          fi

      - name: Build with Gradle
        run: ./gradlew assemble${{ steps.build_type.outputs.type == 'release' && 'Release' || 'Debug' }}

      - name: Run tests
        run: ./gradlew test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build-${{ steps.build_type.outputs.type }}
          path: app/build/outputs/apk/${{ steps.build_type.outputs.type }}/app-${{ steps.build_type.outputs.type }}.apk
          retention-days: 30  # 保留30天

  # 仅在release构建时运行的额外作业
  release: 
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'release'
    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build-release
          path: ./artifacts
      
      - name: List downloaded files
        run: ls -la ./artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./artifacts/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}